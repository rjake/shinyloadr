geom_count() +
facet_wrap(~factor) +
scale_color_manual(
values = color_values$hex,
labels = color_values$interaction
) +
guides(color = guide_legend(override.aes = list(size = 5)))
ggplot(df, aes(x, y, color = hex)) +
geom_count() +
facet_wrap(~factor)
ggplot(df, aes(x, y, color = hex)) +
geom_count() +
facet_wrap(~factor) +
scale_color_manual(
values = color_values$hex,
labels = color_values$interaction
)
ggplot(df, aes(x, y, color = hex)) +
geom_count() +
facet_wrap(~factor) +
scale_color_manual(
values = color_values$hex,
labels = color_values$interaction
) +
guides(color = guide_legend(override.aes = list(size = 5)))
df <-
raw_data %>%
mutate(
# field for unique color
interaction = paste(factor, intensity),
# get integer position of factors
factor_int = as.integer(factor),
intensity_int = as.integer(intensity),
# create equal intervals for color, adding in some padding so we avoid extremes of 0, 1
hue_base = factor_int / (max(factor_int) + 1),
light_base = 1-(intensity_int / (max(intensity_int)+2)),
# using ^^^ to feed into hcl()
hue = floor(hue_base * 360),
light = floor(light_base * 100)
) %>%
# final colors
mutate(hex = hcl(h = hue, l = light))
color_values <-
df %>%
distinct(interaction, hex, factor, intensity) %>%
arrange(factor, intensity) %>%
mutate(interaction = fct_inorder(interaction))
ggplot(df, aes(x, y, color = hex)) +
geom_count() +
facet_wrap(~factor) +
scale_color_manual(
values = color_values$hex,
labels = color_values$interaction
) +
guides(color = guide_legend(override.aes = list(size = 5)))
View(color_values)
color_values <-
df %>%
distinct(-x, y)
color_values <-
df %>%
distinct(-c(x, y))
select(-c(x,y)
select(-c(x, y)
color_values <-
df %>%
select(-c(x, y))
color_values <-
df %>%
select(-c(x, y))
distinct()
color_values <-
df %>%
select(-c(x, y)) %>%
distinct()
View(color_values)
color_values <-
df %>%
select(-c(x, y)) %>%
distinct() %>%
arrange(factor, intensity) %>%
mutate(interaction = fct_inorder(interaction))
ggplot(df, aes(x, y, color = interaction())) +
geom_count() +
facet_wrap(~factor) +
scale_color_manual(
values = color_values$hex,
labels = color_values$interaction
) +
guides(color = guide_legend(override.aes = list(size = 5)))
ggplot(df, aes(x, y, color = interaction)) +
geom_count() +
facet_wrap(~factor) +
scale_color_manual(
values = color_values$hex,
labels = color_values$interaction
) +
guides(color = guide_legend(override.aes = list(size = 5)))
raw_data <-
ggplot2::diamonds %>%
filter(
price < 500,
color %in% c("E", "F", "G")
) %>%
select(
x = carat,
y = price,
factor = color,
intensity = cut
) %>%
mutate(factor = fct_inorder(factor))
raw_data <-
ggplot2::diamonds %>%
filter(
price < 500,
color %in% c("E", "F", "G")
) %>%
select(
x = carat,
y = price,
factor = color,
intensity = cut
) %>%
mutate(factor = fct_relevel(factor))
df <-
raw_data %>%
mutate(
# field for unique color
interaction = paste(factor, intensity),
# get integer position of factors
factor_int = as.integer(factor),
intensity_int = as.integer(intensity),
# create equal intervals for color, adding in some padding so we avoid extremes of 0, 1
hue_base = factor_int / (max(factor_int) + 1),
light_base = 1-(intensity_int / (max(intensity_int)+2)),
# using ^^^ to feed into hcl()
hue = floor(hue_base * 360),
light = floor(light_base * 100)
) %>%
# final colors
mutate(hex = hcl(h = hue, l = light))
color_values <-
df %>%
select(-c(x, y)) %>%
distinct() %>%
arrange(factor, intensity) %>%
mutate(interaction = fct_inorder(interaction))
ggplot(df, aes(x, y, color = interaction)) +
geom_count() +
facet_wrap(~factor) +
scale_color_manual(
values = color_values$hex,
labels = color_values$interaction
) +
guides(color = guide_legend(override.aes = list(size = 5)))
raw_data <-
ggplot2::diamonds %>%
filter(
price < 500,
color %in% c("E", "F", "G")
) %>%
select(
x = carat,
y = price,
factor = color,
intensity = cut
) %>%
mutate(factor = fct_inorder(factor))
raw_data <-
ggplot2::diamonds %>%
filter(
price < 500,
color %in% c("E", "F", "G")
) %>%
select(
x = carat,
y = price,
factor = color,
intensity = cut
) %>%
mutate(factor = factor(factor))
df <-
raw_data %>%
mutate(
# field for unique color
interaction = paste(factor, intensity),
# get integer position of factors
factor_int = as.integer(factor),
intensity_int = as.integer(intensity),
# create equal intervals for color, adding in some padding so we avoid extremes of 0, 1
hue_base = factor_int / (max(factor_int) + 1),
light_base = 1-(intensity_int / (max(intensity_int)+2)),
# using ^^^ to feed into hcl()
hue = floor(hue_base * 360),
light = floor(light_base * 100)
) %>%
# final colors
mutate(hex = hcl(h = hue, l = light))
color_values <-
df %>%
select(-c(x, y)) %>%
distinct() %>%
arrange(factor, intensity) %>%
mutate(interaction = fct_inorder(interaction))
ggplot(df, aes(x, y, color = interaction)) +
geom_count() +
facet_wrap(~factor) +
scale_color_manual(
values = color_values$hex,
labels = color_values$interaction
) +
guides(color = guide_legend(override.aes = list(size = 5)))
df <-
raw_data %>%
mutate(
# field for unique color
interaction = paste(factor, intensity),
# get integer position of factors
factor_int = as.integer(factor)-1,
intensity_int = as.integer(intensity),
# create equal intervals for color, adding in some padding so we avoid extremes of 0, 1
hue_base = factor_int / (max(factor_int) + 1),
light_base = 1-(intensity_int / (max(intensity_int)+2)),
# using ^^^ to feed into hcl()
hue = floor(hue_base * 360),
light = floor(light_base * 100)
) %>%
# final colors
mutate(hex = hcl(h = hue, l = light))
color_values <-
df %>%
select(-c(x, y)) %>%
distinct() %>%
arrange(factor, intensity) %>%
mutate(interaction = fct_inorder(interaction))
ggplot(df, aes(x, y, color = interaction)) +
geom_count() +
facet_wrap(~factor) +
scale_color_manual(
values = color_values$hex,
labels = color_values$interaction
) +
guides(color = guide_legend(override.aes = list(size = 5)))
2/3*360
df <-
raw_data %>%
mutate(
# field for unique color
interaction = paste(factor, intensity),
# get integer position of factors
factor_int = as.integer(factor)-1,
intensity_int = as.integer(intensity),
# create equal intervals for color, adding in some padding so we avoid extremes of 0, 1
hue_base = factor_int / (max(factor_int) + 0.5),
light_base = 1-(intensity_int / (max(intensity_int)+2)),
# using ^^^ to feed into hcl()
hue = floor(hue_base * 360),
light = floor(light_base * 100)
) %>%
# final colors
mutate(hex = hcl(h = hue, l = light))
color_values <-
df %>%
select(-c(x, y)) %>%
distinct() %>%
arrange(factor, intensity) %>%
mutate(interaction = fct_inorder(interaction))
ggplot(df, aes(x, y, color = interaction)) +
geom_count() +
facet_wrap(~factor) +
scale_color_manual(
values = color_values$hex,
labels = color_values$interaction
) +
guides(color = guide_legend(override.aes = list(size = 5)))
raw_data <-
diamonds %>%
filter(
price < 500,
color %in% c("E", "F", "G")
) %>%
mutate(factor = factor(factor)) %>%
select(
x = carat,
y = price,
factor,
intensity = cut
)
raw_data <-
diamonds %>%
filter(
price < 500,
color %in% c("E", "F", "G")
) %>%
mutate(factor = factor(color)) %>%
select(
x = carat,
y = price,
factor,
intensity = cut
)
df <-
raw_data %>%
mutate(
# field for unique color
interaction = paste(factor, intensity),
# get integer position of factors
factor_int = as.integer(factor)-1,
intensity_int = as.integer(intensity),
# create equal intervals for color, adding in some padding so we avoid extremes of 0, 1
hue_base = factor_int / (max(factor_int) + 0.5),
light_base = 1-(intensity_int / (max(intensity_int)+2)),
# using ^^^ to feed into hcl()
hue = floor(hue_base * 360),
light = floor(light_base * 100)
) %>%
# final colors
mutate(hex = hcl(h = hue, l = light))
# create table for scale_color_manual()
color_values <-
df %>%
select(-c(x, y)) %>%
distinct() %>%
arrange(factor, intensity) %>%
mutate(interaction = fct_inorder(interaction))
ggplot(df, aes(x, y, color = interaction)) +
geom_count() +
facet_wrap(~factor) +
scale_color_manual(
values = color_values$hex,
labels = color_values$interaction
) +
guides(color = guide_legend(override.aes = list(size = 5)))
color_values <-
df %>%
#  select(-c(x, y)) %>%
distinct(factor, intensity, interaction, hex) %>%
arrange(factor, intensity) %>%
mutate(interaction = fct_inorder(interaction))
ggplot(df, aes(x, y, color = interaction)) +
geom_count() +
facet_wrap(~factor) +
scale_color_manual(
values = color_values$hex,
labels = color_values$interaction
) +
guides(color = guide_legend(override.aes = list(size = 5)))
color_values
df
df
raw_data <-
diamonds %>%
filter(price < 500, color %in% c("E", "F", "G")) %>%
mutate(
factor = factor(color),
interaction = paste(factor, intensity)
)%>%
select(
x = carat,
y = price,
factor,
intensity = cut
)
raw_data <-
diamonds %>%
filter(price < 500, color %in% c("E", "F", "G")) %>%
mutate(
factor = factor(color),
interaction = paste(factor, intensity)
)%>%
select(
x = carat,
y = price,
factor,
intensity = cut
)
raw_data <-
diamonds %>%
filter(price < 500, color %in% c("E", "F", "G")) %>%
mutate(
factor = factor(color),
intensity = cut,
interaction = paste(factor, intensity)
)
color_values <-
raw_data %>%
distinct(factor, intensity, interaction)
# create table for scale_color_manual()
color_values <-
raw_data %>%
distinct(factor, intensity, interaction) %>%
arrange(factor, intensity) %>%
mutate(interaction = fct_inorder(interaction)) %>%
mutate(
# get integer position of factors
factor_int = as.integer(factor)-1,
intensity_int = as.integer(intensity),
# create equal intervals for color, adding in some padding so we avoid extremes of 0, 1
hue_base = factor_int / (max(factor_int) + 0.5),
light_base = 1-(intensity_int / (max(intensity_int)+2)),
# using ^^^ to feed into hcl()
hue = floor(hue_base * 360),
light = floor(light_base * 100)
) %>%
# final colors
mutate(hex = hcl(h = hue, l = light))
ggplot(df, aes(x, y, color = interaction)) +
geom_count() +
facet_wrap(~factor) +
scale_color_manual(
values = color_values$hex,
labels = color_values$interaction
) +
guides(color = guide_legend(override.aes = list(size = 5)))
interaction = fct_inorder(interaction)) %>%
# get integer position of factors
factor_int = as.integer(factor)-1,
intensity_int = as.integer(intensity),
# create equal intervals for color, adding in some padding so we avoid extremes of 0, 1
hue_base = factor_int / (max(factor_int) + 0.5),
light_base = 1-(intensity_int / (max(intensity_int)+2)),
# using ^^^ to feed into hcl()
hue = floor(hue_base * 360),
light = floor(light_base * 100),
# final colors
hex = hcl(h = hue, l = light)
color_values <-
raw_data %>%
distinct(factor, intensity, interaction) %>%
arrange(factor, intensity) %>%
mutate(
interaction = fct_inorder(interaction)) %>%
# get integer position of factors
factor_int = as.integer(factor)-1,
intensity_int = as.integer(intensity),
# create equal intervals for color, adding in some padding so we avoid extremes of 0, 1
hue_base = factor_int / (max(factor_int) + 0.5),
light_base = 1-(intensity_int / (max(intensity_int)+2)),
# using ^^^ to feed into hcl()
hue = floor(hue_base * 360),
light = floor(light_base * 100),
# final colors
hex = hcl(h = hue, l = light)
# create table for scale_color_manual()
color_values <-
raw_data %>%
distinct(factor, intensity, interaction) %>%
arrange(factor, intensity) %>%
mutate(
interaction = fct_inorder(interaction),
# get integer position of factors
factor_int = as.integer(factor)-1,
intensity_int = as.integer(intensity),
# create equal intervals for color, adding in some padding so we avoid extremes of 0, 1
hue_base = factor_int / (max(factor_int) + 0.5),
light_base = 1-(intensity_int / (max(intensity_int)+2)),
# using ^^^ to feed into hcl()
hue = floor(hue_base * 360),
light = floor(light_base * 100),
# final colors
hex = hcl(h = hue, l = light)
)
styler:::style_selection()
ggplot(raw_data, aes(x, y, color = interaction)) +
geom_count() +
facet_wrap(~factor) +
scale_color_manual(
values = color_values$hex,
labels = color_values$interaction
) +
guides(color = guide_legend(override.aes = list(size = 5)))
raw_data <-
diamonds %>%
filter(price < 500, color %in% c("E", "F", "G")) %>%
mutate(
x = carat,
y = price,
factor = factor(color),
intensity = cut,
interaction = paste(factor, intensity)
)
# create table for scale_color_manual()
color_values <-
raw_data %>%
distinct(factor, intensity, interaction) %>%
arrange(factor, intensity) %>%
mutate(
interaction = fct_inorder(interaction),
# get integer position of factors
factor_int = as.integer(factor) - 1,
intensity_int = as.integer(intensity),
# create equal intervals for color, adding in some padding so we avoid extremes of 0, 1
hue_base = factor_int / (max(factor_int) + 0.5),
light_base = 1 - (intensity_int / (max(intensity_int) + 2)),
# using ^^^ to feed into hcl()
hue = floor(hue_base * 360),
light = floor(light_base * 100),
# final colors
hex = hcl(h = hue, l = light)
)
ggplot(raw_data, aes(x, y, color = interaction)) +
geom_count() +
facet_wrap(~factor) +
scale_color_manual(
values = color_values$hex,
labels = color_values$interaction
) +
guides(color = guide_legend(override.aes = list(size = 5)))
color_values
color_values %>% filter(intensity == "good")
color_values %>% filter(intensity == "Good")
setwd("~/GitHub/shinyloadr")
